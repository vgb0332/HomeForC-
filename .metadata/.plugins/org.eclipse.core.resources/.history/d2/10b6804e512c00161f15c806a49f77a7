//
// Programmed by cskim HUFS.ac.kr 2008/5/6
//
#ifndef MY_FIVECARDS_H
#define MY_FIVECARDS_H
#include <cassert>
#include "Card.h"

const int FIVE = 5;

template <typename T>
class FiveCards {
public:
	FiveCards();
	FiveCards(const FiveCards& r);
	FiveCards& operator=(const FiveCards& r);
	Card<T>& operator[](int i);
	Card<T> operator[](int i) const;
	~FiveCards();
	int compare(const FiveCards& right) const;
	string tostring() const;

	static FiveCards& getHighValue();
private:
	Card<T>* pelem;

};
template <typename T>
FiveCards<T>::FiveCards(){
	pelem = new Card<T>[FIVE];
}
template <typename T>
FiveCards<T>::FiveCards(const FiveCards<T>& right){
	pelem = new Card<T>[FIVE];
		 for(int i=0; i<FIVE; ++i)
			 pelem[i] = right.pelem[i];
}
template <typename T>
FiveCards<T>& FiveCards<T>::operator =(const FiveCards<T>& right){
	if(this != &right) {
			delete[] pelem;
			pelem = new Card[FIVE];
			for(int i=0; i<FIVE; ++i)
				pelem[i]=right.pelem[i];
		}
		return *this;
}


bool operator<(const FiveCards& left, const FiveCards& right);
bool operator>(const FiveCards& left, const FiveCards& right);

ostream& operator<<(ostream& out, const FiveCards& value);

#endif
